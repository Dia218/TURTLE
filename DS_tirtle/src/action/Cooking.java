package action;

import java.util.Arrays;
import java.util.Vector;

import java.awt.*;
import javax.swing.*;

import item.*;
import item.armors.*;
import item.processedFoods.*;
import item.unprocessedFoods.*;
import item.weapons.*;
import user.*;


public class Cooking {

	/*
	 * 재료 선택 - 요리 결과 출력 - 인벤토리에 수납
	 */

	//요리하기 생성자
	public Cooking() {
		
		//솥 패널 생성
		JPanel potPanel = new JPanel();
		
		//솥 버튼 객체 배열 생성
		JButton[] potButton = new JButton[6];
		
		ImageIcon slot = new ImageIcon("./images/slot.png");

		JButton potresultButton = new JButton();
		
		//메뉴 패널 배치 관리자 - 플로우레이아웃
		potPanel.setLayout(new GridLayout(5, 1));
		
		//인벤토리 버튼 초기화 및 배치
		for(int i = 0; i <= 3; i++) {
			potPanel.add(potButton[i] = new JButton(slot));
			potButton[i].addActionListener(GameSystem.userListener);
		}

		potPanel.add(potButton[4] = new JButton("요리하기"));
		potButton[4].addActionListener(GameSystem.userListener);

		//메뉴 패널 배치하기
		GameSystem.playPanel.removeAll();
		GameSystem.playPanel.add(potPanel);
		
		//중앙 패널 다시 그리기
		GameSystem.playPanel.revalidate();
		GameSystem.playPanel.repaint();
	}
	
/*	
	//요리하기 메소드
	
	//선택아이템 객체를 요리 재료 아이템 객체로 넣기
	//Item potItem = user.Inventory.vector.get(i);	//Inventory import 필요
	
	//솥에 선택된 아이템을 집어넣기
	void inputItem(Item item) {
		
		//아이템을 넣기 전, 인벤토리에 들어있는 아이템의 갯수
		int vectorSize = potItem.size();
		
		//인벤토리 용량을 초과할 경우
		if (vectorSize >= 4) {
			 result = "솥이 꽉 찼습니다.";
		}
		else {
			potItem.add(item);
			
			//벡터에서 방금 저장한 아이템 객체의 인덱스 값
			int index = item.size()-1;
			
			//벡터 인덱스 값과 동일한 인덱스의 버튼에 이미지 삽입
			potButton[index].setIcon(item.imageIcon);
			potButton[index].setText(item.name);
		}
	}
	
	//아이템 객체를 사전 순으로 정렬
	void sort(Vector<Item> item) {
		objs = item.toArray();

		Arrays.sort(objs);
	}
	
	//재료들을 분별하여 요리 제작
	void cook () {
		//우선순위 1: 괴물라자냐
		if(potButton[0].returnName == "MonsterMeat", potButton[1] == "MonsterMeat", objs[2] != "Twigs", objs[3] != "Twigs") {
			resultItem.add(MonsterLasagna);
			consumeItem(MonsterMeat);
			consumeItem(MonsterMeat);
			
			
			resultButton.setIcon(item.MonsterLasagna.imageIcon);
			resultButton.setText(item.MonsterLasagna.name);
		}
		
		//우선순위 2: 미트스튜
		else if(objs[0] == "Meat", objs[1] == "Meat", objs[2] != "Twigs", objs[3] != "Twigs") {
			resultItem.add(MeatStew);

			resultButton.setIcon(item.MeatStew.imageIcon);
			resultButton.setText(item.MeatStew.name);
		}
		
		//우선순위 3: 
		else if(objs[0] == "Meat", objs[2] != "Twigs", objs[2] !="Twigs", objs[3] != "Twigs") {
			resultItem.add(Meatball);

			resultButton.setIcon(item.Meatball.imageIcon);
			resultButton.setText(item.Meatball.name);
		}
		
		//재료가 겹치지 않은 가공식품. (가공식품 오름차순 우선순위. 곤죽 제외)
		else {
			//잼 한 줌
			if(objs[0] == "Berry", obj[1] == "Berry", obj[2] == "Berry", obj[3] == "Berry") {
				resultItem.add(BerryJam);

				resultButton.setIcon(item.BerryJam.imageIcon);
				resultButton.setText(item.BerryJam.name);
			}
			
			//생선튀김
			else if(objs[0] == "Fish", obj[1] != "Twigs", obj[2] == "Twigs", obj[3] == "Twigs" || obj[0] != "Twigs", obj[1] == "Fish", obj[2] == "Twigs", obj[3] == "Twigs") {
				resultItem.add(Fishsticks);

				resultButton.setIcon(Fishsticks.returnImg);
				resultButton.setText(Fishsticks.returName);
			}
			
			//라따뚜이
			else if(objs[0] == "Carrot", obj[1] != "Carrot", obj[2] == "Carrot", obj[3] == "Carrot" || objs[0] == "Carrot", obj[1] != "Carrot", obj[2] == "Carrot", obj[3] == "Mushroom" || objs[0] == "Carrot", obj[1] != "Carrot", obj[2] == "Mushroom", obj[3] == "Mushroom" || objs[0] == "Carrot", obj[1] != "Mushroom", obj[2] == "Mushroom", obj[3] == "Mushroom" || objs[0] == "Mushroom", obj[1] != "Mushroom", obj[2] == "Mushroom", obj[3] == "Mushroom") {
				resultItem.add(Ratatouille);

				resultButton.setIcon(item.Ratatouille.imageIcon);
				resultButton.setText(item.Ratatouille.name);
			}
			
			//샌드위치
			else if(objs[0] == "Carrot", obj[1] != "Carrot", obj[2] == "Carrot", obj[3] == "FrogLeg" || objs[0] == "Carrot", obj[1] != "Carrot", obj[2] == "FrogLeg", obj[3] == "Mushroom" || objs[0] == "Carrot", obj[1] != "FrogLeg", obj[2] == "Mushroom", obj[3] == "Mushroom" || objs[0] == "FrogLeg", obj[1] != "Mushroom", obj[2] == "Mushroom", obj[3] == "Mushroom") {
				resultItem.add(Sandwich);

				resultButton.setIcon(item.Sandwich.imageIcon);
				resultButton.setText(item.Sandwich.name);
			}
			
			//곤죽
			else {
				resultItem.add(WetGoop);

				resultButton.setIcon(item.WetGoop.imageIcon);
				resultButton.setText(item.WetGoop.name);
			}
		}
		
		//가공식품을 인벤토리에 추가
		void inputResultItem() {
			inputItem(resultItem);
		}
		
	}
*/
}
